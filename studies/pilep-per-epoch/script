

pu_B  <- read.csv("MyDataPileupHistogram_SingleMuon2016B_03Feb2017_ver2.csv", header=T)
pu_C  <- read.csv("MyDataPileupHistogram_SingleMuon2016C_03Feb2017_v1.csv",   header=T)
pu_D  <- read.csv("MyDataPileupHistogram_SingleMuon2016D_03Feb2017_v1.csv",   header=T)
pu_E  <- read.csv("MyDataPileupHistogram_SingleMuon2016E_03Feb2017_v1.csv",   header=T)
pu_F  <- read.csv("MyDataPileupHistogram_SingleMuon2016F_03Feb2017_v1.csv",   header=T)
pu_G  <- read.csv("MyDataPileupHistogram_SingleMuon2016G_03Feb2017_v1.csv",   header=T)
pu_H  <- read.csv("MyDataPileupHistogram_SingleMuon2016H_03Feb2017_ver2.csv", header=T)
pu_H3 <- read.csv("MyDataPileupHistogram_SingleMuon2016H_03Feb2017_ver3.csv", header=T)


## degenerative R does not do the following
#add_norm_pu <-function(pu_df) {
#pu_df$pu_norm     = pu_df$pu     / sum(pu_df$pu)
#pu_df$pu_err_norm = pu_df$pu_err / sum(pu_df$pu)
#}


pu_BCDEF <- pu_B + pu_C + pu_D + pu_E + pu_F
pu_GH    <- pu_G + pu_H + pu_H3


pu_B$pu_norm     <- pu_B$pu     / sum(pu_B$pu)
pu_B$pu_norm_err <- pu_B$pu_err / sum(pu_B$pu)

pu_C$pu_norm     <- pu_C$pu     / sum(pu_C$pu)
pu_C$pu_norm_err <- pu_C$pu_err / sum(pu_C$pu)

pu_D$pu_norm     <- pu_D$pu     / sum(pu_D$pu)
pu_D$pu_norm_err <- pu_D$pu_err / sum(pu_D$pu)

pu_E$pu_norm     <- pu_E$pu     / sum(pu_E$pu)
pu_E$pu_norm_err <- pu_E$pu_err / sum(pu_E$pu)

pu_F$pu_norm     <- pu_F$pu     / sum(pu_F$pu)
pu_F$pu_norm_err <- pu_F$pu_err / sum(pu_F$pu)

pu_G$pu_norm     <- pu_G$pu     / sum(pu_G$pu)
pu_G$pu_norm_err <- pu_G$pu_err / sum(pu_G$pu)

pu_H$pu_norm     <- pu_H$pu     / sum(pu_H$pu)
pu_H$pu_norm_err <- pu_H$pu_err / sum(pu_H$pu)

pu_H3$pu_norm     <- pu_H3$pu     / sum(pu_H3$pu)
pu_H3$pu_norm_err <- pu_H3$pu_err / sum(pu_H3$pu)


pu_BCDEF$pu_norm     <- pu_BCDEF$pu     / sum(pu_BCDEF$pu)
pu_BCDEF$pu_norm_err <- pu_BCDEF$pu_err / sum(pu_BCDEF$pu)

pu_GH$pu_norm     <- pu_GH$pu     / sum(pu_GH$pu)
pu_GH$pu_norm_err <- pu_GH$pu_err / sum(pu_GH$pu)



library(ggplot2)

ggplot(pu_BCDEF, aes(bin_n, pu_norm)) + geom_point() + geom_point(data=pu_GH, mapping=aes(x=bin_n, y=pu_norm), color="red")


old_pu_data_mc_ratio <- read.csv("pileup_norm_values_data_mc_8-8-2016.csv", header=T)

ggplot(old_pu_data_mc_ratio, aes(x=1:nrow(old_pu_data_mc_ratio), norm_value_ratio)) + geom_point()

main_ratio_now = c(0.360609416811339, 0.910848525427002, 1.20629960507795, 0.965997726573782, 1.10708082813183, 1.14843491548622, 0.786526251164482, 0.490577792661333, 0.740680941110478,
0.884048630953726,
0.964813189764159, 1.07045369167689, 1.12497267309738, 1.17367530613108, 1.20239808206413, 1.20815108390021, 1.20049333094509, 1.18284686347315, 1.14408796655615,
1.0962284704313, 1.06549162803223, 1.05151011089581, 1.05159666626121, 1.05064452078328, 1.0491726301522, 1.05772537082991, 1.07279673875566, 1.0837536468865, 1.09536667397119,
1.10934472980173, 1.09375894592864, 1.08263679568271, 1.04289345879947, 0.9851490341672, 0.909983816540809, 0.821346330143864, 0.71704523475871, 0.609800913869359, 0.502935245638477,
0.405579825620816, 0.309696044611377, 0.228191137503131, 0.163380359253309, 0.113368437957202, 0.0772279997453792, 0.0508111733313502, 0.0319007262683943, 0.0200879459309245, 0.0122753366005436,
0.00739933885813127, 0.00437426967257811, 0.00260473545284139, 0.00157047254226743, 0.000969500595715493, 0.000733193118123283, 0.000669817107713128, 0.000728548958604492, 0.000934559691182011, 0.00133719688378802,
0.00186652283903214, 0.00314422244976771, 0.00406954793369611, 0.00467888840511915, 0.00505224284441512, 0.00562827194936864, 0.0055889504870752, 0.00522867039470319, 0.00450752163476433, 0.00395300774604375,
0.00330577167682956, 0.00308353042577215, 0.00277846504893301, 0.00223943190687725, 0.00196650068765464, 0.00184742734258922)

main_ratio_now_df = data.frame(nvtx=1:length(main_ratio_now), norm_value_ratio=main_ratio_now)

ggplot(old_pu_data_mc_ratio, aes(x=1:nrow(old_pu_data_mc_ratio), norm_value_ratio)) + geom_point() +
  geom_point(data=main_ratio_now_df, mapping=aes(x=nvtx, y=norm_value_ratio), color="red")

# quite different
# so, where is the needed MC PU?





main_pu_data_now <- read.csv("used_pileup_data/data-pu-69-2-up-down-N-MC-Summer16-normalized-averages.csv", header=T)

main_pu_data_now$pileup_normalized_average

the bins match

pu_per_epoch_nominal <- data.frame(
    nbin=main_pu_data_now$nbin[1:100],
    pu_mc=main_pu_data_now$pileup_normalized_average[1:100],
    pu_BCDEF_nom = pu_BCDEF$pu_norm,
    pu_GH_nom    = pu_GH$pu_norm)

sum(pu_per_epoch_nominal$pu_mc)
sum(pu_per_epoch_nominal$pu_BCDEF_nom)
sum(pu_per_epoch_nominal$pu_GH_nom)

pu_per_epoch_nominal$ratio_BCDEF <- pu_per_epoch_nominal$pu_BCDEF_nom / pu_per_epoch_nominal$pu_mc
pu_per_epoch_nominal$ratio_GH    <- pu_per_epoch_nominal$pu_GH_nom    / pu_per_epoch_nominal$pu_mc


ggplot(pu_per_epoch_nominal, aes(nbin, ratio_BCDEF)) + geom_point() + geom_point(mapping=aes(y=ratio_GH), color="red")

-- strange looking distrs


compare with my ad-hoc distrs

from array import array

pileup_ratio = array('d', [
0.360609416811339, 0.910848525427002, 1.20629960507795, 0.965997726573782, 1.10708082813183, 1.14843491548622, 0.786526251164482, 0.490577792661333, 0.740680941110478,
0.884048630953726,
0.964813189764159, 1.07045369167689, 1.12497267309738, 1.17367530613108, 1.20239808206413, 1.20815108390021, 1.20049333094509, 1.18284686347315, 1.14408796655615,
1.0962284704313, 1.06549162803223, 1.05151011089581, 1.05159666626121, 1.05064452078328, 1.0491726301522, 1.05772537082991, 1.07279673875566, 1.0837536468865, 1.09536667397119,
1.10934472980173, 1.09375894592864, 1.08263679568271, 1.04289345879947, 0.9851490341672, 0.909983816540809, 0.821346330143864, 0.71704523475871, 0.609800913869359, 0.502935245638477,
0.405579825620816, 0.309696044611377, 0.228191137503131, 0.163380359253309, 0.113368437957202, 0.0772279997453792, 0.0508111733313502, 0.0319007262683943, 0.0200879459309245, 0.0122753366005436,
0.00739933885813127, 0.00437426967257811, 0.00260473545284139, 0.00157047254226743, 0.000969500595715493, 0.000733193118123283, 0.000669817107713128, 0.000728548958604492, 0.000934559691182011, 0.00133719688378802,
0.00186652283903214, 0.00314422244976771, 0.00406954793369611, 0.00467888840511915, 0.00505224284441512, 0.00562827194936864, 0.0055889504870752, 0.00522867039470319, 0.00450752163476433, 0.00395300774604375,
0.00330577167682956, 0.00308353042577215, 0.00277846504893301, 0.00223943190687725, 0.00196650068765464, 0.00184742734258922,])


pileup_ratio_ele = array('d', [
   0.413231   ,    1.01701    ,    1.19502     ,   0.883906   ,    1.05852    ,    1.11823    ,    0.789439   ,    0.515477   ,    0.81338    ,    0.990148   ,
   1.0919     ,    1.21784    ,    1.28268     ,   1.33936    ,    1.37267    ,    1.38001    ,    1.37224    ,    1.35253    ,    1.30805    ,    1.25303    ,
   1.21761    ,    1.20085    ,    1.1987      ,   1.19257    ,    1.1807     ,    1.17079    ,    1.15238    ,    1.10667    ,    1.03375    ,    0.935086   ,
   0.793376   ,    0.65125    ,    0.502727    ,   0.369298   ,    0.25859    ,    0.173207   ,    0.110361   ,    0.0677957  ,    0.0403186  ,    0.0236369  ,
   0.0133546  ,    0.00746494 ,    0.00417626  ,   0.00233773 ,    0.0013288  ,    0.000757718,    0.000432788,    0.000266239,    0.000177605,    0.000137241,
   0.000125696,    0.000137018,    0.000167806 ,   0.000215108,    0.000313214,    0.000464376,    0.000669855,    0.000981399,    0.00148275 ,    0.00211313 ,
   0.0035872  ,    0.00465614 ,    0.005359    ,   0.00578897 ,    0.00645001 ,    0.00640537 ,    0.00599263 ,    0.00516618 ,    0.00453067 ,    0.00378886 ,
   0.00353415 ,    0.00318451 ,    0.0025667   ,   0.00225388 ,    0.00211741 ,])

def calc_pu_per_runs(pu_ele, pu_gld, ele_B = 19128.209 / (19128.209 + 12210.15), ele_H = 12210.15  / (19128.209 + 12210.15), gld_B = 19713.888 / (19713.888 + 16146.177), gld_H = 16146.177 / (19713.888 + 16146.177)):                                                                                                           
    pu_H = (pu_ele    / ele_B - pu_gld / gld_B) / (ele_H / ele_B - gld_H / gld_B)
    pu_B = (pu_ele    / ele_H - pu_gld / gld_H) / (ele_B / ele_H - gld_B / gld_H)
    return pu_B, pu_H

for nbin in range(1,100):
    weight_pu_el    = pileup_ratio_ele [nbin]
    weight_pu_mu    = pileup_ratio     [nbin]

    weight_pu_bcdef,    weight_pu_gh = calc_pu_per_runs(weight_pu_el, weight_pu_mu)

    print(nbin, weight_pu_bcdef,    weight_pu_gh)

1 1.6992075423161452 -0.051708825625365225
2 1.1225368426830473 1.308570855815741
3 0.3563815440862405 1.7103166538682726
4 0.7464663314011146 1.5473778594182883
5 0.9241321015538236 1.4223003978197857
6 0.8081564312053119 0.7601165972417765
7 0.6754802226415499 0.26481872935130973
8 1.2805468277273822 0.08152455853233985
9 1.6719464499159513 -0.07794561440017997
10 1.9085645193315788 -0.18747245723099148
11 2.16494984105574 -0.26588583348042355
12 2.296113086258025 -0.3049466779243942
13 2.4040559399481523 -0.32857417450069876
14 2.4668436106108276 -0.34144338157586374
15 2.484381719213227 -0.3500795614550124
16 2.475890415572172 -0.3567195796940552
17 2.442920079609487 -0.35565616759801894
18 2.3616760606632696 -0.34254229380586776
19 2.260642399257188 -0.32547809072639955
20 2.195128256174833 -0.3137531286616255
21 2.16051362304614 -0.3025423703905189
22 2.1439914359635224 -0.28217715163371204
23 2.1045883522612234 -0.2361821163858197
24 2.025899718809274 -0.14337520531074763
25 1.8973474677910531 0.03257768529313485
26 1.6637849653960002 0.3512218601137216
27 1.2539313284221927 0.8759729596133262
28 0.6377989855862221 1.6540399847642144
29 -0.1847070103743127 2.6893342884468296
30 -1.1368958645387295 3.8173063900211335
31 -2.1208574239603135 4.993985361642939
32 -2.9684025422072167 5.94053827581676
33 -3.5881834086896642 6.569019665911586
34 -3.927290636186084 6.81611793028918
35 -3.991760186835204 6.697972283630905
36 -3.788214218355269 6.21780125085034
37 -3.415149749951952 5.524117571744411
38 -2.9324729890250762 4.697442290398055
39 -2.4307423954231626 3.868624891804117
40 -1.8909464283479742 2.9965995289447704
41 -1.4109297278122297 2.2294974007312707
42 -1.0188751404643208 1.6068708219688734
43 -0.7111496852293513 1.1200747272831475
44 -0.48640225063133297 0.7653997960373726
45 -0.32088762791122866 0.5046417325671659
46 -0.2017813413232841 0.3172179321996052
47 -0.1271087791709229 0.1998097310088789
48 -0.07756286345794618 0.1219644731729138
49 -0.04652926707934973 0.073244182343226
50 -0.027175794766209262 0.04289573743172862
51 -0.015720625163212446 0.024979326462496284
52 -0.008845780818313756 0.014288334617613271
53 -0.004632646581486433 0.007809516161683523
54 -0.002385587268164361 0.004541109210698721
55 -0.0008557961183350031 0.0025325347200390405
56 0.0002926854620876628 0.0012607222497570156
57 0.001282390122136752 0.0005098715338037347
58 0.002418079681088705 1.747876059932872e-05
59 0.0036978366914481825 -0.0003694439894857413
60 0.006433790039232165 -0.0008722185335766602
61 0.008425602204478888 -0.0012490340449439945
62 0.009729422136604715 -0.0014876274408751455
63 0.010523205813124277 -0.0016276016300558166
64 0.011730528953068102 -0.0018223593126413587
65 0.011651711834045172 -0.0018134580313558313
66 0.010901862537119021 -0.0016980884596104878
67 0.009398742893432448 -0.001464479544004024
68 0.008242748901718569 -0.001284608359116248
69 0.006893203342196988 -0.001074350382943906
70 0.006429847966651798 -0.0010022001600709745
71 0.0057937697978875016 -0.0009031110979627546
72 0.004669736809773338 -0.0007278809537178234
73 0.0041005900366028 -0.000639143881159201
74 0.003852328491801564 -0.0006004831879743592

ok, this might explain things

calculated_pu_weights <-read.csv("calculated_per_epoch_pu.csv", header=T)

nbin,weight_pu_bcdef,weight_pu_gh

ggplot(pu_per_epoch_nominal, aes(nbin, ratio_BCDEF)) + geom_point() +
    geom_point(mapping=aes(y=ratio_GH), color="red") +
    geom_point(data=calculated_pu_weights, mapping=aes(x=nbin, y=weight_pu_bcdef), color="green") +
    geom_point(data=calculated_pu_weights, mapping=aes(x=nbin, y=weight_pu_gh), color="blue")


# all together with updowns

pu_BCDEF       <- read.csv("MyDataPileupHistogram_minbias-69-2_26-4-2019_GoldenCert_BCDEF.csv", header=T)
pu_BCDEF_Down  <- read.csv("MyDataPileupHistogram_minbias-69-2_26-4-2019_GoldenCert_BCDEF_Down_66-017.csv", header=T)
pu_BCDEF_Up    <- read.csv("MyDataPileupHistogram_minbias-69-2_26-4-2019_GoldenCert_BCDEF_Up_72-383.csv", header=T)
pu_GH       <- read.csv("MyDataPileupHistogram_minbias-69-2_26-4-2019_GoldenCert_GH.csv", header=T)
pu_GH_Down  <- read.csv("MyDataPileupHistogram_minbias-69-2_26-4-2019_GoldenCert_GH_Down_66-017.csv", header=T)
pu_GH_Up    <- read.csv("MyDataPileupHistogram_minbias-69-2_26-4-2019_GoldenCert_GH_Up_72-383.csv", header=T)

pu_BCDEF      $pu_norm <- pu_BCDEF      $pu / sum(pu_BCDEF      $pu)
pu_BCDEF_Down $pu_norm <- pu_BCDEF_Down $pu / sum(pu_BCDEF_Down $pu)
pu_BCDEF_Up   $pu_norm <- pu_BCDEF_Up   $pu / sum(pu_BCDEF_Up   $pu)
pu_GH      $pu_norm <- pu_GH      $pu / sum(pu_GH      $pu)
pu_GH_Down $pu_norm <- pu_GH_Down $pu / sum(pu_GH_Down $pu)
pu_GH_Up   $pu_norm <- pu_GH_Up   $pu / sum(pu_GH_Up   $pu)

main_pu_data_now <- read.csv("used_pileup_data/data-pu-69-2-up-down-N-MC-Summer16-normalized-averages.csv", header=T)

main_pu_data_now$pileup_normalized_average
sum(main_pu_data_now$pileup_normalized_average)

the bins match

pu_per_epoch_all <- data.frame(
    nbin=main_pu_data_now$nbin[1:100],
    pu_mc=main_pu_data_now$pileup_normalized_average[1:100],
    pu_BCDEF_nom  = pu_BCDEF$pu_norm,
    pu_BCDEF_Down = pu_BCDEF_Down$pu_norm,
    pu_BCDEF_Up   = pu_BCDEF_Up$pu_norm,
    pu_GH_nom  = pu_GH$pu_norm,
    pu_GH_Down = pu_GH_Down$pu_norm,
    pu_GH_Up   = pu_GH_Up$pu_norm
	)

sum(pu_per_epoch_all$pu_mc)
sum(pu_per_epoch_all$pu_BCDEF_nom)
sum(pu_per_epoch_all$pu_BCDEF_Down)
sum(pu_per_epoch_all$pu_BCDEF_Up)
sum(pu_per_epoch_all$pu_GH_nom)
sum(pu_per_epoch_all$pu_GH_Down)
sum(pu_per_epoch_all$pu_GH_Up)

pu_per_epoch_all$ratio_BCDEF      <- pu_per_epoch_all$pu_BCDEF_nom  / pu_per_epoch_all$pu_mc
pu_per_epoch_all$ratio_BCDEF_Down <- pu_per_epoch_all$pu_BCDEF_Down / pu_per_epoch_all$pu_mc
pu_per_epoch_all$ratio_BCDEF_Up   <- pu_per_epoch_all$pu_BCDEF_Up   / pu_per_epoch_all$pu_mc
pu_per_epoch_all$ratio_GH         <- pu_per_epoch_all$pu_GH_nom     / pu_per_epoch_all$pu_mc
pu_per_epoch_all$ratio_GH_Down    <- pu_per_epoch_all$pu_GH_Down    / pu_per_epoch_all$pu_mc
pu_per_epoch_all$ratio_GH_Up      <- pu_per_epoch_all$pu_GH_Up      / pu_per_epoch_all$pu_mc


ggplot(pu_per_epoch_all, aes(nbin, ratio_BCDEF)) + geom_point() +
   geom_point(mapping=aes(y=ratio_BCDEF_Down), color="blue") +
   geom_point(mapping=aes(y=ratio_BCDEF_Up),   color="blue") +
   geom_point(mapping=aes(y=ratio_GH),      color="red") +
   geom_point(mapping=aes(y=ratio_GH_Down), color="red") +
   geom_point(mapping=aes(y=ratio_GH_Up),   color="red")

# ok!

pu_per_epoch_all$ratio_BCDEF
  [1]          NaN 0.0095886208 0.5776865397 1.0233004203 1.0083366096 1.2158510340 1.2887481725 0.9705138670 0.6573177335 1.1635728135 1.4857636927
 [12] 1.5009482334 1.4514586332 1.4035598214 1.4171230048 1.4353069202 1.4278634811 1.4044837262 1.3768186333 1.3330031729 1.2744359409 1.2163075523
 [23] 1.1616073030 1.1240002373 1.0941364455 1.0660695295 1.0416984593 1.0130564673 0.9700712357 0.9203311560 0.8692631761 0.7965866756 0.7314671223
 [34] 0.6523463831 0.5687054084 0.4823132277 0.3965994070 0.3121499417 0.2364186594 0.1714799246 0.1202111023 0.0790221128 0.0497517154 0.0302802556
 [45] 0.0178087370 0.0102758135 0.0057386316 0.0030774403 0.0016794149 0.0009188412 0.0005328167 0.0003492515 0.0002863425 0.0002956655 0.0003516098
 [56] 0.0004988223 0.0007342755 0.0010578854 0.0015503122 0.0023433569 0.0033407839 0.0056724855 0.0073637764 0.0084760046 0.0091564392 0.0102022625
 [67] 0.0101317755 0.0094789852 0.0081717643 0.0071665366 0.0059931677 0.0055902693 0.0050372087 0.0040599721 0.0035651639 0.0033492907          Inf
 [78]          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf
 [89]          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf
[100]          Inf

pu_per_epoch_all$ratio_BCDEF_Down
  [1]          NaN 0.0153667969 0.6891809486 1.1601810247 1.1655664961 1.3539345418 1.4539256296 1.1448982617 1.0782047058 1.7930463380 2.2164832902
 [12] 2.1506625765 1.9592786349 1.8240756356 1.7938228325 1.7756989722 1.6936020451 1.5933227876 1.5131795726 1.4280715808 1.3322524118 1.2436532283
 [23] 1.1648594314 1.1058876595 1.0528664466 0.9963592864 0.9389492536 0.8781488618 0.8099296851 0.7417754407 0.6760367200 0.5957590110 0.5236926486
 [34] 0.4450245773 0.3677395027 0.2936508402 0.2255192416 0.1643016798 0.1141439873 0.0752804710 0.0476059133 0.0280347470 0.0157204810 0.0084836333
 [45] 0.0044127581 0.0022545087 0.0011258103 0.0005567695 0.0003027543 0.0001920254 0.0001562929 0.0001593515 0.0001904067 0.0002453016 0.0003200674
 [56] 0.0004653120 0.0006818820 0.0009671683 0.0013893910 0.0020547781 0.0028630657 0.0047475144 0.0060144576 0.0067514434 0.0071080944 0.0077136086
 [67] 0.0074558179 0.0067847592 0.0056854570 0.0048433925 0.0039318873 0.0035579083 0.0031080075 0.0024269317 0.0020633280 0.0018754582          Inf
 [78]          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf
 [89]          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf
[100]          Inf


pu_per_epoch_all$ratio_BCDEF_Up
  [1]          NaN 0.0059598412 0.4901115533 0.8955066803 0.8795211517 1.1062394600 1.1404684587 0.8650218669 0.4437416134 0.7393319145 1.0097269213
 [12] 1.0376404815 1.0609548074 1.0721267343 1.1161700434 1.1533323089 1.1770118678 1.2074397521 1.2296721371 1.2232723959 1.1967643924 1.1679136238
 [23] 1.1379537690 1.1207650375 1.1100257565 1.1032100074 1.1060674610 1.1108500776 1.1022045800 1.0827578262 1.0565626732 0.9997407140 0.9499532715
 [34] 0.8799800763 0.8000519083 0.7105812384 0.6150169143 0.5127635583 0.4144487179 0.3233486501 0.2457555729 0.1764673760 0.1221868808 0.0822719095
 [45] 0.0537970753 0.0346456708 0.0216435771 0.0129743697 0.0078566879 0.0046618186 0.0027687511 0.0016541260 0.0010443045 0.0007284114 0.0005887501
 [56] 0.0006412291 0.0008277866 0.0011377166 0.0016555899 0.0025265285 0.0036605553 0.0063339072 0.0083903011 0.0098630619 0.0108888325 0.0124065091
 [67] 0.0126064207 0.0120745864 0.0106630150 0.0095846516 0.0082200638 0.0078677807 0.0072787942 0.0060268729 0.0054399860 0.0052561842          Inf
 [78]          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf
 [89]          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf          Inf
[100]          Inf



pu_per_epoch_all$ratio_GH
  [1]                NaN 0.7923966165550341 1.3206676450689692 1.4314050681219410 0.9139173915540429 0.9732839512546894 0.9758371835396235 0.5602049252864559
  [9] 0.2854729322811546 0.2204862425770137 0.1438852294551190 0.3053192173605273 0.6017836345742870 0.7822855124164086 0.8742128227661290 0.9159002630545462
 [17] 0.9378846334114083 0.9495663163686077 0.9442440878690979 0.9117058293335381 0.8770170417648185 0.8799748963086315 0.9160809496039715 0.9625337586731879
 [25] 0.9971456032972257 1.0283877191853710 1.0774400368137698 1.1462819788479417 1.2235925788952713 1.3106768396716892 1.4046659432469826 1.4593082605398517
 [33] 1.5146069014110246 1.5233012690983123 1.4974120340854682 1.4360570232383967 1.3438230304232581 1.2151026963636524 1.0690945958524307 0.9106548859389182
 [41] 0.7566089147801717 0.5934459067043246 0.4476876554380586 0.3271054251238090 0.2309154193601109 0.1595851549791273 0.1062544378149940 0.0673559532806101
 [49] 0.0427320898021242 0.0262448490604951 0.0158457770655627 0.0093254025228037 0.0054565650542544 0.0031385995670769 0.0017295617570310 0.0010214898388716
 [57] 0.0005905275011105 0.0003234355927401 0.0001771290570776 0.0000995297289998 0.0000530499437056 0.0000342332435665 0.0000173515193266 0.0000080957416536
 [65] 0.0000037146197696 0.0000018526016169 0.0000008674969736 0.0000004002877156 0.0000001760093781 0.0000000804321989 0.0000000354304911 0.0000000174636467
 [73] 0.0000000083012601 0.0000000035114725 0.0000000016057138 0.0000000007810826                Inf                Inf                Inf                Inf
 [81]                Inf                Inf                NaN                NaN                NaN                NaN                NaN                NaN
 [89]                NaN                NaN                NaN                NaN                NaN                NaN                NaN                NaN
 [97]                NaN                NaN                NaN                NaN


pu_per_epoch_all$ratio_GH_Down
  [1]                 NaN 0.81428793844913028 1.74534663553406610 1.40265194859107756 1.02529687327769592 1.08773425686398384 1.02767620586297292
  [8] 0.62027093556673207 0.36761988051584205 0.22598535457795466 0.27367834795556040 0.67092979664080921 0.99160106467545983 1.09534930584835966
 [15] 1.13395571674522722 1.15568772724638946 1.13765907121676846 1.09125877593570952 1.03581290492279665 0.98061787954372870 0.95984386651741038
 [22] 0.97973858379080214 1.00002335463852643 1.01259558055105270 1.02410890369605023 1.04589437240884764 1.08760823580738997 1.14447117354317163
 [29] 1.20156537301837574 1.25644020730890071 1.30446669755839539 1.30536984313194937 1.30101217348902454 1.25535815482144364 1.18412721357627415
 [36] 1.08932481083630783 0.97520676871619461 0.83837446081404476 0.69460195322691609 0.55067398626496733 0.42070831195011738 0.30001033241545638
 [43] 0.20370291959251538 0.13279431867943567 0.08300686750850418 0.05045630187280000 0.02937289581248214 0.01619365100892409 0.00889324082405334
 [50] 0.00470961560362523 0.00244481996169108 0.00123545510112472 0.00062135021495797 0.00030849336596121 0.00014798303586979 0.00007711517872165
 [57] 0.00004008260745848 0.00002021197012521 0.00001047534980043 0.00000574164742812 0.00000308308610710 0.00000207130589446 0.00000112578232819
 [64] 0.00000057412526796 0.00000028848668407 0.00000015491212658 0.00000007575632291 0.00000003524537034 0.00000001513400039 0.00000000658427975
 [71] 0.00000000271431289 0.00000000123416400 0.00000000053813129 0.00000000020937973 0.00000000008474601 0.00000000003929975                 Inf
 [78]                 Inf                 NaN                 NaN                 NaN                 NaN                 NaN                 NaN
 [85]                 NaN                 NaN                 NaN                 NaN                 NaN                 NaN                 NaN
 [92]                 NaN                 NaN                 NaN                 NaN                 NaN                 NaN                 NaN
 [99]                 NaN                 NaN


pu_per_epoch_all$ratio_GH_Up
  [1]              NaN 0.77627151099057 0.99653850182123 1.44345865370983 0.81114020684281 0.88494710058229 0.90367194860043 0.53591083091285 0.22148369164314
 [10] 0.20464354023011 0.11075115335543 0.13432936165235 0.32613193593120 0.52661329157577 0.65791369521069 0.72256523581772 0.75749739033748 0.79988803112911
 [19] 0.83560336934485 0.83935773399918 0.81798066008565 0.80568660632538 0.82654961208942 0.88473425193572 0.94837055783462 1.00109871057968 1.05917334508425
 [28] 1.13424597667433 1.22184675399576 1.32669915771627 1.45022086535295 1.54733266600517 1.65892159206283 1.72972336154445 1.76551607252308 1.75837588885673
 [37] 1.70849655365464 1.60549032181041 1.47295093869894 1.31672565975546 1.15852763206484 0.97237258182634 0.79323910186310 0.63289428451977 0.49213307046849
 [46] 0.37748120225896 0.28080020413459 0.20004177233696 0.14337334750013 0.09994717770056 0.06878108485635 0.04630300598811 0.03107832921615 0.02053911732033
 [55] 0.01300381784358 0.00880252563489 0.00579992419207 0.00358626995251 0.00218659280931 0.00134309001403 0.00076547631898 0.00051520781680 0.00026513104410
 [64] 0.00012207373190 0.00005371714956 0.00002505645467 0.00001080316276 0.00000458637390 0.00000188383115 0.00000082589010 0.00000035999690 0.00000018068523
 [73] 0.00000008947486 0.00000004009622 0.00000001966999 0.00000001031619              Inf              Inf              Inf              Inf              Inf
 [82]              Inf              Inf              Inf              Inf              Inf              NaN              NaN              NaN              NaN
 [91]              NaN              NaN              NaN              NaN              NaN              NaN              NaN              NaN              NaN
[100]              NaN





